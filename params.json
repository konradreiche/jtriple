{"google":"UA-37176344-1","body":"# JTriple\r\n\r\nJTriple is a Java tool which creates a RDF data model out of a Java object model by making use of reflection, a small set of annotations and Jena's flexible RDF/OWL API.\r\n\r\n### Why another RDF binding for Java?\r\n\r\nThe most popular tool for persisting Java objects to RDF is [JenaBean]. JTriple was developed, respectively JenaBean was not modified due to the following reasons:\r\n\r\n* JenaBean aims for a persistence layer (object serialization). This fact is often expressed by missing confguration, for instance a field cannot be declared as transient.\r\n\r\n* Not the whole functionality of JenaBean is required. Additional data is serialized, for instance the serialization of the package names. Package names are vital for deserialization but for the pure data translation (one-way) it only interferes.\r\n\r\n* Data (RDF) and schema (OWL) should be translated into two separate RDF graphs. JenaBean creates only one graph.\r\n\r\n## Getting Started\r\n\r\nJTriple can be deployed through Maven. Before, the following repository has to be added to your pom.xml\r\n\r\n```xml\r\n<repository>\r\n     <id>berlin.reiche.jtriple</id>\r\n     <url>https://github.com/platzhirsch/jtriple/raw/master/repository/releases</url>\r\n</repository>\r\n```\r\n\r\nThen it can be added with this dependency\r\n\r\n```xml\r\n<dependency>\r\n     <groupId>berlin.reiche.jtriple</groupId>\r\n     <artifactId>jtriple</artifactId>\r\n     <version>0.1-RELEASE</version>\r\n     <scope>compile</scope>\r\n</dependency>\r\n```\r\n\r\nNot using Maven? Head to the [download section] and get the JAR.\r\n\r\n\r\n### Example\r\n\r\nConsidering the following example. A class Philosopher\r\n\r\n```java\r\npublic class Philosopher {\r\n\r\n\t@RdfIdentifier\r\n\tString name;\r\n\r\n\tString nationality;\r\n\tList<Branch> interests;\r\n}\r\n```\r\n\r\nwith an enum type Branch\r\n\r\n```java\r\npublic enum Branch {\r\n\r\n\tEPISTEMOLOGY(\"Epistemology\"),\r\n\tMATHEMATIC(\"Mathematic\"),\r\n\tMETAPHYSISC(\"Metaphysic\"),\r\n\tPHILOSOPHY_OF_MIND(\"Philosophy of Mind\");\r\n\t\r\n\tString name;\r\n\t\r\n\tBranch(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n```\r\nThe only requirement is to annotate one field or method of a class with `@RdfIdentifier`. Binding objects to RDF is as easy as follows\r\n\r\n\r\n```java\r\n// create data\r\nPhilosopher locke = new Philosopher();\r\nlocke.setName(\"John Locke\");\r\nlocke.setNationality(\"English\");\r\n\r\nList<Branch> branches = new ArrayList<>();\r\nbranches.add(METAPHYSISC);\r\nbranches.add(EPISTEMOLOGY);\r\nbranches.add(PHILOSOPHY_OF_MIND);\r\nlocke.setInterests(branches);\r\n\r\n// bind object\r\nBinding binding = new Binding(DEFAULT_NAMESPACE);\r\nModel model = binding.getModel();\r\nmodel.setNsPrefix(\"philosophy\", NAMESPACE);\r\n\r\nbinding.bind(locke);\r\n\r\n// output RDF\r\nmodel.write(System.out, \"TURTLE\");\r\n```\r\n\r\nIt is sufficient to produce this RDF\r\n\r\n```\r\n@prefix philosophy:  <http://konrad-reiche.com/philosophy/> .\r\n\r\n<http://konrad-reiche.com/philosophy/philosopher/John_locke>\r\n      a       <http://dbpedia.org/page/Philosopher> ;\r\n      philosophy:interests\r\n              <http://konrad-reiche.com/philosophy/branch/Metaphysisc> ,\r\n              <http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind> ,\r\n              <http://konrad-reiche.com/philosophy/branch/Epistemology> ;\r\n      philosophy:name \"John Locke\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      philosophy:nationality\r\n              \"English\"^^<http://www.w3.org/2001/XMLSchema#string> .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Epistemology>\r\n      a       philosophy:branch ;\r\n      philosophy:name \"Epistemology\"^^<http://www.w3.org/2001/XMLSchema#string> .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Metaphysisc>\r\n      a       philosophy:branch ;\r\n      philosophy:name \"Metaphysic\"^^<http://www.w3.org/2001/XMLSchema#string> .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind>\r\n      a       philosophy:branch ;\r\n      philosophy:name \"Philosophy of Mind\"^^<http://www.w3.org/2001/XMLSchema#string> .\r\n```\r\n\r\nNow, to get more sophisticated results, annotations help to provide neccessary information\r\n\r\n```java\r\n@RdfType(\"http://dbpedia.org/page/Philosopher\")\r\npublic class Philosopher {\r\n\r\n\t@Label\r\n\t@RdfIdentifier\r\n\tString name;\r\n\r\n\t@RdfProperty(\"http://www.foafrealm.org/xfoaf/0.1/nationality\")\r\n\tString nationality;\r\n\r\n\tList<Branch> interests;\r\n}\r\n```\r\n\r\n```java\r\npublic enum Branch {\r\n\r\n\t@SameAs({ \"http://dbpedia.org/resource/Epistemology\" })\r\n\tEPISTEMOLOGY(\"Epistemology\"),\r\n\t\r\n\t@SameAs({ \"http://dbpedia.org/resource/Mathematic\" })\r\n\tMATHEMATIC(\"Mathematic\"),\r\n\r\n\t@SameAs({ \"http://dbpedia.org/resource/Metaphysic\" })\r\n\tMETAPHYSISC(\"Metaphysic\"),\r\n\r\n\t@SameAs({ \"http://dbpedia.org/resource/Philosophy_of_mind\" })\r\n\tPHILOSOPHY_OF_MIND(\"Philosophy of Mind\");\r\n\t\r\n\t@Label\r\n\tString name;\r\n\t\r\n\tBranch(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n```\r\n\r\nLeading to this RDF:\r\n\r\n```\r\n@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .\r\n@prefix xfoaf:   <http://www.foafrealm.org/xfoaf/0.1/> .\r\n@prefix philosophy:  <http://konrad-reiche.com/philosophy/> .\r\n@prefix dbpedia:  <http://dbpedia.org/resource/> .\r\n\r\n<http://konrad-reiche.com/philosophy/philosopher/John_locke>\r\n      a       <http://dbpedia.org/page/Philosopher> ;\r\n      rdfs:label \"John Locke\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      philosophy:interests\r\n              <http://konrad-reiche.com/philosophy/branch/Metaphysisc> ,\r\n              <http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind> ,\r\n              <http://konrad-reiche.com/philosophy/branch/Epistemology> ;\r\n      xfoaf:nationality \"English\"^^<http://www.w3.org/2001/XMLSchema#string> .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Metaphysisc>\r\n      a       philosophy:branch ;\r\n      rdfs:label \"Metaphysic\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      <http://www.w3.org/2002/07/owl#sameAs>\r\n              dbpedia:Metaphysic .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind>\r\n      a       philosophy:branch ;\r\n      rdfs:label \"Philosophy of Mind\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      <http://www.w3.org/2002/07/owl#sameAs>\r\n              dbpedia:Philosophy_of_mind .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Epistemology>\r\n      a       philosophy:branch ;\r\n      rdfs:label \"Epistemology\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      <http://www.w3.org/2002/07/owl#sameAs>\r\n              dbpedia:Epistemology .\r\n\r\n```\r\n\r\n### Annotations\r\n\r\nWhat annotations are there and how can they be used?\r\n\r\n<table>\r\n  <tr>\r\n    <th>Name</th><th>Use</th><th>Effect</th>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@RdfIdentifier</code></td><td>Fields, Methods</td><td>Value to be used for constructing the resource URI</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@RdfProperty</code></td><td>Fields, Methods</td><td>Value to define another property URI</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@RdfType</code></td><td>Classes</td><td>Value to define a rdfs:type property on the resource</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@Transient</code></td><td>Fields</td><td>Indicate that this field must not be converted</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@SameAs</code></td><td>Enum Constants</td><td>Value to define a owl:sameAs property on the resource</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>@Label</code></td><td>Fields, Methods</td><td>Value to define a rdfs:label property on the resource</td>\r\n  </tr>\r\n</table>\r\n\r\n## Future Work\r\n\r\nSome ideas for the future development:\r\n\r\n* Implement OWL binding\r\n* Increase the configuration flexibility\r\n\r\nIf something is amiss, feel free to open an issue or make a pull request. The implementation is lightweight and allows to change the functionality very quickly.\r\n\r\n[JenaBean]: http://code.google.com/p/jenabean/\r\n[Jena API]: http://jena.apache.org/\r\n[download section]: https://github.com/platzhirsch/jtriple/downloads\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A Java object model binding for RDF","name":"JTriple"}