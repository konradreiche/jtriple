{"tagline":"A Java object model binding for RDF","body":"# JTriple\r\n\r\nJTriple is a Java tool which creates a RDF data model out of a Java object model by making use of reflection, a small set of annotations and Jena's flexible RDF/OWL API.\r\n\r\n### Why another RDF binding for Java?\r\n\r\nThe most popular tool for persisting Java objects to RDF is [JenaBean]. JTriple was developed, respectively Jenabean was not modified due to the following reasons:\r\n\r\n* JenaBean aims for a persistence layer (object serialization). This fact is often expressed by missing con?guration, for instance a field cannot be declared as transient.\r\n\r\n* Not the whole functionality of JenaBean is required. Additional data is serialized, for instance the serialization of the package names. Package names are vital for deserialization but for the pure data translation (one-way) it only interferes.\r\n\r\n* Data (RDF) and schema (OWL) should be translated into two separate RDF graphs. Jenabean creates only one graph.\r\n\r\n## How does it work?\r\n\r\nThe Java objects are instantiated and passed to JTriple which then examines the class and its different fields and methods with reflection. The run-time state of the Java objects is read and used to create a RDF graph by using [Jena API].\r\n\r\n```java\r\nBinding binding = new Binding(NAMESPACE);\r\nbinding.bind(object);\r\n```\r\n\r\nThe only required annotation is `@RdfIdentifier`. One field needs to be specified as identifier. Otherwise JTriple does not know how to construct the URI. The mapping between Java and RDF is as follows:\r\n\r\nA statement in RDF consist of Subject, Predicate and Object\r\n\r\n<table>\r\n  <tr>\r\n    <th>RDF</th><th>Java</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Subject</td><td>Object</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Predicate</td><td>Field</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Object</td><td>Field value</td>\r\n  </tr>\r\n  <tr>\r\n    <td>URI</td><td>Annotated Field/Method</td>\r\n  </tr> \r\n</table>\r\n\r\n\r\n\r\n\r\n### Example\r\n\r\nConsidering the following example, a class Philosopher\r\n\r\n```java\r\n@RdfType(\"http://dbpedia.org/page/Philosopher\")\r\npublic class Philosopher {\r\n\r\n\t@Label\r\n\t@RdfIdentifier\r\n\tString name;\r\n\r\n\t@RdfProperty(\"http://www.foafrealm.org/xfoaf/0.1/nationality\")\r\n\tString nationality;\r\n\r\n\tList<Branch> interests;\r\n}\r\n```\r\n\r\nwith the enum type Branch\r\n\r\n```java\r\npublic enum Branch {\r\n\r\n\t@SameAs({ \"http://dbpedia.org/resource/Epistemology\" })\r\n\tEPISTEMOLOGY(\"Epistemology\"),\r\n\t\r\n\t@SameAs({ \"http://dbpedia.org/resource/Mathematic\" })\r\n\tMATHEMATIC(\"Mathematic\"),\r\n\r\n\t@SameAs({ \"http://dbpedia.org/resource/Metaphysic\" })\r\n\tMETAPHYSISC(\"Metaphysic\"),\r\n\r\n\t@SameAs({ \"http://dbpedia.org/resource/Philosophy_of_mind\" })\r\n\tPHILOSOPHY_OF_MIND(\"Philosophy of Mind\");\r\n\t\r\n\t@Label\r\n\tString name;\r\n\t\r\n\tBranch(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n```\r\n\r\nA default namespace is passed to the `Binding` object. Unless further specified this namespace plus the simple name of the class or field is used to construct the URI. With the following statements:\r\n\r\n```java\r\nPhilosopher locke = new Philosopher();\r\nlocke.setName(\"John Locke\");\r\nlocke.setNationality(\"English\");\r\n\r\nList<Branch> branches = new ArrayList<>();\r\nbranches.add(METAPHYSISC);\r\nbranches.add(EPISTEMOLOGY);\r\nbranches.add(PHILOSOPHY_OF_MIND);\r\nlocke.setInterests(branches);\r\n\r\nBinding binding = new Binding(NAMESPACE);\r\nModel model = binding.getModel();\r\nmodel.setNsPrefix(\"philosophy\", NAMESPACE);\r\nmodel.setNsPrefix(\"rdfs\", \"http://www.w3.org/2000/01/rdf-schema#\");\r\nmodel.setNsPrefix(\"xfoaf\", \"http://www.foafrealm.org/xfoaf/0.1/\");\r\nmodel.setNsPrefix(\"dbpedia\", \"http://dbpedia.org/resource/\");\r\n\r\nbinding.bind(locke);\r\nmodel.write(System.out, \"TURTLE\");\r\n```\r\n\r\nthis RDF is produced:\r\n\r\n```\r\n@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .\r\n@prefix xfoaf:   <http://www.foafrealm.org/xfoaf/0.1/> .\r\n@prefix philosophy:  <http://konrad-reiche.com/philosophy/> .\r\n@prefix dbpedia:  <http://dbpedia.org/resource/> .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Metaphysisc>\r\n      a       philosophy:branch ;\r\n      rdfs:label \"Metaphysic\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      <http://www.w3.org/2002/07/owl#sameAs>\r\n              dbpedia:Metaphysic .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind>\r\n      a       philosophy:branch ;\r\n      rdfs:label \"Philosophy of Mind\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      <http://www.w3.org/2002/07/owl#sameAs>\r\n              dbpedia:Philosophy_of_mind .\r\n\r\n<http://konrad-reiche.com/philosophy/philosopher/John_locke>\r\n      a       <http://dbpedia.org/page/Philosopher> ;\r\n      rdfs:label \"John Locke\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      philosophy:NAMESPACE\r\n              \"http://konrad-reiche.com/philosophy/\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      philosophy:interests\r\n              <http://konrad-reiche.com/philosophy/branch/Metaphysisc> ,\r\n              <http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind> ,\r\n              <http://konrad-reiche.com/philosophy/branch/Epistemology> ;\r\n      xfoaf:nationality \"English\"^^<http://www.w3.org/2001/XMLSchema#string> .\r\n\r\n<http://konrad-reiche.com/philosophy/branch/Epistemology>\r\n      a       philosophy:branch ;\r\n      rdfs:label \"Epistemology\"^^<http://www.w3.org/2001/XMLSchema#string> ;\r\n      <http://www.w3.org/2002/07/owl#sameAs>\r\n              dbpedia:Epistemology .\r\n\r\n```\r\n\r\n### Annotations\r\n\r\nWhat annotations are there and how can they be used?\r\n\r\n<table>\r\n  <tr>\r\n    <th>Name</th><th>Use</th><th>Effect</th>\r\n  </tr>\r\n  <tr>\r\n    <td>@RdfIdentifier</td><td>Fields, Methods</td><td>Value to be used for constructing the resource URI</td>\r\n  </tr>\r\n  <tr>\r\n    <td>@RdfProperty</td><td>Fields, Methods</td><td>Value to define another property URI</td>\r\n  </tr>\r\n  <tr>\r\n    <td>@RdfType</td><td>Classes</td><td>Value to define a rdfs:type property on the resource</td>\r\n  </tr>\r\n  <tr>\r\n    <td>@Transient</td><td>Fields</td><td>Indicate that this field must not be converted</td>\r\n  </tr>\r\n  <tr>\r\n    <td>@SameAs</td><td>Enum Constants</td><td>Value to define a owl:sameAs property on the resource</td>\r\n  </tr>\r\n  <tr>\r\n    <td>@Label</td><td>Fields, Methods</td><td>Value to define a rdfs:label property on the resource</td>\r\n  </tr>\r\n</table>\r\n\r\n## Using it\r\n\r\nJTriple can used as a Maven dependency. You have to define this repository:\r\n\r\n```xml\r\n<repository>\r\n     <id>berlin.reiche.jtriple</id>\r\n     <url>https://github.com/platzhirsch/jtriple/raw/master/repository/snapshots</url>\r\n</repository>\r\n```\r\n\r\nThen it can be added as a dependency:\r\n\r\n```xml\r\n<dependency>\r\n     <groupId>berlin.reiche.jtriple</groupId>\r\n     <artifactId>jtriple</artifactId>\r\n     <version>0.1-RELEASE</version>\r\n     <scope>compile</scope>\r\n</dependency>\r\n```\r\n\r\nApart from that you can head to the [download section] and get the JAR.\r\n\r\n## Future Work\r\n\r\nSome ideas for the future development.\r\n\r\n* Implementing OWL binding\r\n* Increase the configuration flexibility\r\n\r\nIf you feel something is amiss, feel free to open an issue. The implementation is very lightweight and allows to change the functionality very quickly.\r\n\r\n[JenaBean]: http://code.google.com/p/jenabean/\r\n[Jena API]: http://jena.apache.org/\r\n[download section]: https://github.com/platzhirsch/jtriple/downloads\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"JTriple"}